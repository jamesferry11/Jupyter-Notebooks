D <- read.csv("SHC.csv")
names(J)
# Find the header names
names(D)
#Plot the scatter plot b/w visits and Appointment
plot(D$Visits,D$Make.An.Appointment, xlab = "Visit", ylab = "Appointment")

plot(D$Page.Views,D$Make.An.Appointment, xlab = "Page.Views", ylab = "Appointment")

plot(D$Email.Click,D$Make.An.Appointment, xlab = "Email.Click", ylab = "Appointment")

plot(D$Average.Page.Depth,D$Make.An.Appointment, xlab = "Average.Page.Depth", ylab = "Appointment")

# Calculate mean value of Appointment. 
mean.Appointment = mean(D$Make.An.Appointment)

#This is how the null model would look like if there is no relationship between them.
abline(h=mean.Appointment)

#Use lm to fit a regression line through data:
model1 = lm(D$Make.An.Appointment~D$Visits)

#Person's Correlation between Visits and Appointment
cor(D$Visits,D$Make.An.Appointment)

#Adding linear regression line to the model. 
abline(model1,col="red",lwd=3)
#Diagonistic Test
plot(model1)
#Confidence of the model
confint(model1,level=.99)

#Multiple R-squared: value can explain approx N% of 
#variation in the outcome(dependent variable) by the model i.e independent variable
#non-linearity 
# Residual Standard error gives an idea of how far the observed Y values
# are from the predicated or fitted values (Y-hats). This gives an 
# idea of a typical sized residual or error.
# Intercept is estimated mean of value when all Xs are zero. 
# Other intercepts indicate an increase of 1 unit in Xs with an increase of
# intercept in Y adjusting or controling for X.
#F-statistics and p-value is the overall test of significance of our model
#non-constant variance, other trouble some observation
# High correlation between mutilple variables suggests that the effects are 
# somewhat bounded together.
anova(model1)
summary(model1)


# POC - 2
install.packages("reshape",dependencies=FALSE);
library(lubridate)
library(reshape)
M1<-read.csv("Historical.csv",header=TRUE)
//Include new column of categorical data type.convert
day<-weekdays(as.Date(M1$Date,'%m/%d/%Y'))
N_M1<-cbind(M1,day)              

Year<-year(as.Date(M2$Date,'%m/%d/%Y'))
N_M1<-cbind(M2,Year)              

//Split the 4 months data to 3 month training and 1 month testing  
training <- month(as.Date(N_M1$Date,'%m/%d/%Y')) < 5
testing <- !training

//Creating testing and training data set
training_d = N_M1[training,]
testing_d = N_M1[testing,]

model1 = glm(Make.An.Appointment~Page.Views+day,data=training_d)

model2 = glm(Make.An.Appointment~I(Visits^7)+day,data=training_d)

model3 = glm(Make.An.Appointment~day,data=training_d)

model4 = glm(Make.An.Appointment~Page.Views+Visits+day,data=training_d)
//Observed Appointment for the month of May
Observed_Appointment <- as.factor(testing_d[,4])



Model1_predicted_values = predict(model1,testing_d)
table(Model1_predicted_values,Observed_Appointment)


Model2_predicted_values = predict(model2,testing_d)
table(Model2_predicted_values,Observed_Appointment)

Model3_predicted_values = predict(model3,testing_d)
table(Model3_predicted_values,Observed_Appointment)

Model4_predicted_values = predict(model4,testing_d)
table(Model4_predicted_values,Observed_Appointment)

// barplot of the coefficients in the model 
bp<- barplot(sort(coef(model3)[2:7]),main="Appointment clicks trend of the day in the week",names.arg = c("Saturday","Sunday","Thursday","Wednesday","Tuesday","Monday"),col=c("lightpink", "mistyrose", "lavender","lightyellow","lightgreen",8),ylim=c(-250,250),legend.text = T)
barplot(sort(coef(model3)[2:7]),main="Appointment clicks trend of the day in the week",names.arg = c("Saturday","Sunday","Thursday","Wednesday","Tuesday","Monday"),col=c("lightpink", "mistyrose", "lavender","lightyellow","lightgreen",8),ylim=c(-250,250),legend.text = c("Saturday","Sunday","Thursday","Wednesday","Tuesday","Monday"),ylab ="Appointment with Friday as the base reference" )
text(bp,0,round(sort(coef(model3)[2:7]),1),cex=1,pos=3)

sort(coef(model3)[1])
N_M1$day<-relevel(N_M1$day,"Friday")
boxplot(N_M1$Make.An.Appointment~N_M1$day)
table(N_M1$day)
mod1<-lm(M1$)
barplot(N_M1$Make.An.Appointment,N_M1$day)
plot(N_M1$Visits[N_M1$day=="Monday"],N_M1$Make.An.Appointment[N_M1$day=="Monday"],col="red",ylim=c(100,700),xlab="Visits",ylab ="Appointment", main="Appointment vs. Visits,Day")
points(N_M1$Visits[N_M1$day=="Tuesday"],N_M1$Make.An.Appointment[N_M1$day=="Tuesday"],col="blue",pch=16)
points(N_M1$Visits[N_M1$day=="Wednesday"],N_M1$Make.An.Appointment[N_M1$day=="Wednesday"],col="orange",pch=16)
points(N_M1$Visits[N_M1$day=="Thursday"],N_M1$Make.An.Appointment[N_M1$day=="Thursday"],col="purple",pch=16)
points(N_M1$Visits[N_M1$day=="Friday"],N_M1$Make.An.Appointment[N_M1$day=="Friday"],col="yellow",pch=16)
points(N_M1$Visits[N_M1$day=="Saturday"],N_M1$Make.An.Appointment[N_M1$day=="Saturday"],col="green",pch=16)
points(N_M1$Visits[N_M1$day=="Sunday"],N_M1$Make.An.Appointment[N_M1$day=="Sunday"],col="pink",pch=16)
legend(9000,650,legend = c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"),col=c("red","blue","orange","purple","yellow","green","pink"),pch=c(1,16),bty="n")

model3
library(ISLR)
attach(Smarket)
summary(Smarket)
nrow(Smarket)
head(M1)
c("Monday","Tuesday","Wednesday","Thursday","Saturday","Sunday")
head(Smarket)


//POC-4
M2<-read.csv("SHC_POC.csv",header=TRUE)
M2<-read.csv("SHC_Prod.csv",header=TRUE)
library(lubridate)
splitdf <- function(dataframe, seed=NULL) {
  if (!is.null(seed)) set.seed(seed)
  index <- 1:nrow(dataframe)
  trainindex <- sample(index, trunc(length(index) * 0.75 ))
  trainset <- dataframe[trainindex, ]
  testset <- dataframe[-trainindex, ]
  list(trainset=trainset,testset=testset)
}

splits <- splitdf(N_M1, seed=750)
str(splits)
lapply(splits,nrow)
training <- splits$trainset
testing <- splits$testset

as.Date(M2$Date,'%m/%d/%Y')
cor(M2[,-10])
pairs(M2[,-10])
//Logical Vector 
Flag = (M2$Year > 2015)
// Training and Testing Data set
train_d = M2[Flag,]
test_d = M2[!Flag,]

//Testing Direction
Actual_Direction = testing$Direction

//Logistic Regression Model
Appt_model = glm(Direction ~ Year+Monday+Tuesday+Wednesday+Thursday+Friday+Saturday+Sunday+Total,data=training,family=binomial)
Appt_model = glm(Direction ~ Monday+Tuesday+Wednesday+Thursday+Friday+Saturday+Sunday,data=training,family=binomial)
Appt_pred_probs = predict(Appt_model,testing,type="response")
Predicted_Direction = rep("DOWN",16)
Predicted_Direction[Appt_pred_probs>0.50] = "UP"
mean(Predicted_Direction != Actual_Direction)
1-mean(Predicted_Direction != Actual_Direction)
table(Actual_Direction,Predicted_Direction)




6//Logistic Regression Model
Appt_model = glm(Direction ~ Page.Views+Visits+Unique.Visitors+Appointment,data=training,family=binomial)
Appt_model = glm(Direction ~ Visits+Unique.Visitors+Appointment+Day,data=training,family=binomial)
Appt_pred_probs = predict(Appt_model,testing,type="response")

Appt_model = glm(Direction ~ Appointment+Day+Year,data=training,family=binomial)
Appt_pred_probs = predict(Appt_model,testing,type="response")

Predicted_Direction = rep("DOWN",107)
Predicted_Direction[Appt_pred_probs>0.60] = "UP"
mean(Predicted_Direction != Actual_Direction)
1-mean(Predicted_Direction != Actual_Direction)
table(Actual_Direction,Predicted_Direction)

Appt_model = glm(Direction ~ Day+Year,data=training,family=binomial)
Appt_pred_probs = predict(Appt_model,testing,type="response")

Predicted_Direction = rep("DOWN",107)
Predicted_Direction[Appt_pred_probs>0.75] = "UP"
mean(Predicted_Direction != Actual_Direction)
1-mean(Predicted_Direction != Actual_Direction)
table(Actual_Direction,Predicted_Direction)

Appt_model = glm(Direction ~ Visits+Appointment,data=training,family=binomial)
Appt_model = glm(Direction ~ Appointment+Day,data=training,family=binomial)
Appt_pred_probs = predict(Appt_model,testing,type="response")
Appt_pred_Direction = rep("DOWN",107)
Appt_pred_Direction[Appt_pred_probs>=0.48] = "UP"
mean(Appt_pred_Direction != dir_test)
1-mean(Appt_pred_Direction != dir_test)

//Accuracy Model 
Appt_pred_probs = predict(Appt_model,test_d,type="response")
Appt_pred_Direction = rep("DOWN",31)
Appt_pred_Direction[Appt_pred_probs>0.01] = "UP"
//Conufsion Matrix
table(Appt_pred_Direction, dir_test)
//High Miss Classification 
mean(Appt_pred_Direction != dir_test)
 

//2 Logistic Regression Model
Appt_model = glm(Direction ~ Monday+Tuesday+Wednesday+Thursday,data=train_d,family=binomial)

//Accuracy Model 
Appt_pred_probs = predict(Appt_model,test_d,type="response")
Appt_pred_Direction = rep("DOWN",31)
Appt_pred_Direction[Appt_pred_probs>0.01] = "UP"
//Conufsion Matrix
table(Appt_pred_Direction, dir_test)
//High Miss Classification 
mean(Appt_pred_Direction != dir_test)
Appt_model
summary(Appt_model)
